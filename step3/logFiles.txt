[5, 13:12:07] CREATE VIEW avg_obesity_rate as 
(SELECT ob.C_CODE, AVG(ob.death_rate) AS avg_deathrate
FROM obesity_report ob,countries c
WHERE c.C_Code = ob.C_Code and ob.YYear BETWEEN 2000 AND 2010
GROUP BY C_CODE): Running...
[5, 13:12:07] CREATE VIEW avg_obesity_rate as 
(SELECT ob.C_CODE, AVG(ob.death_rate) AS avg_deathrate
FROM obesity_report ob,countries c
WHERE c.C_Code = ob.C_Code and ob.YYear BETWEEN 2000 AND 2010
GROUP BY C_CODE): 0 row(s) affected
[6, 13:12:29] Select * from avg_obesity_rate
LIMIT 0, 1000
: Running...
[6, 13:12:29] Select * from avg_obesity_rate
LIMIT 0, 1000
: Fetching...
[6, 13:12:29] Select * from avg_obesity_rate
LIMIT 0, 1000
: 190 row(s) returned
[7, 13:12:49] CREATE VIEW high_airpol_low_lifeex AS
SELECT a.C_Code, a.YYear, a.deathcounts, a.Household_FosilFuel
FROM airpol_occure a
INNER JOIN LifeExpact e ON a.C_Code = e.C_Code AND a.YYear = e.YYear
WHERE a.deathcounts > 2500 AND e.Life_ex_value < (SELECT AVG(Life_ex_value) FROM LifeExpact): Running...
[7, 13:12:49] CREATE VIEW high_airpol_low_lifeex AS
SELECT a.C_Code, a.YYear, a.deathcounts, a.Household_FosilFuel
FROM airpol_occure a
INNER JOIN LifeExpact e ON a.C_Code = e.C_Code AND a.YYear = e.YYear
WHERE a.deathcounts > 2500 AND e.Life_ex_value < (SELECT AVG(Life_ex_value) FROM LifeExpact): 0 row(s) affected
[8, 13:13:10] select * from high_airpol_low_lifeex
LIMIT 0, 1000
: Running...
[8, 13:13:10] select * from high_airpol_low_lifeex
LIMIT 0, 1000
: Fetching...
[8, 13:13:10] select * from high_airpol_low_lifeex
LIMIT 0, 1000
: 1000 row(s) returned
[9, 13:15:00] CREATE VIEW high_drugdeaths_low_lifeex AS
SELECT s.C_Code, s.YYear, s.drugdeaths, e.Life_ex_value
FROM substance_use s
INNER JOIN LifeExpact e ON s.C_Code = e.C_Code AND s.YYear = e.YYear
WHERE s.drugdeaths > 100 AND e.Life_ex_value < (SELECT AVG(Life_ex_value) FROM LifeExpact): Running...
[9, 13:15:00] CREATE VIEW high_drugdeaths_low_lifeex AS
SELECT s.C_Code, s.YYear, s.drugdeaths, e.Life_ex_value
FROM substance_use s
INNER JOIN LifeExpact e ON s.C_Code = e.C_Code AND s.YYear = e.YYear
WHERE s.drugdeaths > 100 AND e.Life_ex_value < (SELECT AVG(Life_ex_value) FROM LifeExpact): 0 row(s) affected
[10, 13:15:37] select * from high_drugdeaths_low_lifeex
LIMIT 0, 1000
: Running...
[10, 13:15:37] select * from high_drugdeaths_low_lifeex
LIMIT 0, 1000
: Fetching...
[10, 13:15:37] select * from high_drugdeaths_low_lifeex
LIMIT 0, 1000
: 188 row(s) returned
[11, 13:16:35] CREATE VIEW high_life_exp_countries AS
SELECT
    c.C_Name AS Country,
    AVG(l.Life_ex_value) AS Avg_Life_Expectancy
FROM countries c
JOIN LifeExpact l ON c.C_Code = l.C_Code
WHERE l.YYear BETWEEN 1990 AND 2012
GROUP BY c.C_Name
HAVING AVG(l.Life_ex_value) >= 75: Running...
[11, 13:16:35] CREATE VIEW high_life_exp_countries AS
SELECT
    c.C_Name AS Country,
    AVG(l.Life_ex_value) AS Avg_Life_Expectancy
FROM countries c
JOIN LifeExpact l ON c.C_Code = l.C_Code
WHERE l.YYear BETWEEN 1990 AND 2012
GROUP BY c.C_Name
HAVING AVG(l.Life_ex_value) >= 75: 0 row(s) affected
[12, 13:16:58] select * from high_life_exp_countries
LIMIT 0, 1000
: Running...
[12, 13:16:58] select * from high_life_exp_countries
LIMIT 0, 1000
: Fetching...
[12, 13:16:58] select * from high_life_exp_countries
LIMIT 0, 1000
: 65 row(s) returned
[13, 13:19:36] select * from high_life_exp_countries
LIMIT 0, 1000
: Running...
[13, 13:19:36] select * from high_life_exp_countries
LIMIT 0, 1000
: Fetching...
[13, 13:19:36] select * from high_life_exp_countries
LIMIT 0, 1000
: 65 row(s) returned
[14, 13:20:52] CREATE VIEW low_death_rate_countries AS
SELECT c.C_Name AS Country,
    AVG(s.death_rate_per_100000_people) AS Avg_Death_Rate_Per_100k_People
FROM countries c
JOIN Smoke_Examine s ON c.C_Code = s.C_code
WHERE s.YYear BETWEEN 1990 AND 2012
GROUP BY c.C_Name
HAVING AVG(s.death_rate_per_100000_people) <= 80: Running...
[14, 13:20:52] CREATE VIEW low_death_rate_countries AS
SELECT c.C_Name AS Country,
    AVG(s.death_rate_per_100000_people) AS Avg_Death_Rate_Per_100k_People
FROM countries c
JOIN Smoke_Examine s ON c.C_Code = s.C_code
WHERE s.YYear BETWEEN 1990 AND 2012
GROUP BY c.C_Name
HAVING AVG(s.death_rate_per_100000_people) <= 80: 0 row(s) affected
[15, 13:22:24] select * from low_death_rate_countries
LIMIT 0, 1000
: Running...
[15, 13:22:24] select * from low_death_rate_countries
LIMIT 0, 1000
: Fetching...
[15, 13:22:24] select * from low_death_rate_countries
LIMIT 0, 1000
: 53 row(s) returned
[16, 13:26:58] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Running...
[16, 13:26:58] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Fetching...
[16, 13:26:58] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: 114 row(s) returned
[17, 13:35:15] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Running...
[17, 13:35:15] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Fetching...
[17, 13:35:15] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: 114 row(s) returned
[18, 13:35:32] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Running...
[18, 13:35:32] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Fetching...
[18, 13:35:32] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: 114 row(s) returned
[19, 13:35:49] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Running...
[19, 13:35:49] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: Fetching...
[19, 13:35:49] SELECT Country
FROM high_life_exp_countries
UNION SELECT Country FROM low_death_rate_countries: 114 row(s) returned
[20, 13:45:37] SELECT Country
FROM high_life_exp_countries
UNION
SELECT Country
FROM low_death_rate_countries: Running...
[20, 13:45:37] SELECT Country
FROM high_life_exp_countries
UNION
SELECT Country
FROM low_death_rate_countries: Fetching...
[20, 13:45:37] SELECT Country
FROM high_life_exp_countries
UNION
SELECT Country
FROM low_death_rate_countries: 114 row(s) returned
[21, 13:45:41] SELECT h.Country
FROM high_life_exp_countries h
LEFT JOIN low_death_rate_countries l ON h.Country = l.Country
WHERE l.Country IS NULL
UNION
SELECT l.Country
FROM high_life_exp_countries h
RIGHT JOIN low_death_rate_countries l ON h.Country = l.Country
WHERE h.Country IS NULL
UNION
SELECT h.Country
FROM high_life_exp_countries h
JOIN low_death_rate_countries l ON h.Country = l.Country: Running...
[21, 13:45:41] SELECT h.Country
FROM high_life_exp_countries h
LEFT JOIN low_death_rate_countries l ON h.Country = l.Country
WHERE l.Country IS NULL
UNION
SELECT l.Country
FROM high_life_exp_countries h
RIGHT JOIN low_death_rate_countries l ON h.Country = l.Country
WHERE h.Country IS NULL
UNION
SELECT h.Country
FROM high_life_exp_countries h
JOIN low_death_rate_countries l ON h.Country = l.Country: Fetching...
[21, 13:45:41] SELECT h.Country
FROM high_life_exp_countries h
LEFT JOIN low_death_rate_countries l ON h.Country = l.Country
WHERE l.Country IS NULL
UNION
SELECT l.Country
FROM high_life_exp_countries h
RIGHT JOIN low_death_rate_countries l ON h.Country = l.Country
WHERE h.Country IS NULL
UNION
SELECT h.Country
FROM high_life_exp_countries h
JOIN low_death_rate_countries l ON h.Country = l.Country: 114 row(s) returned
[22, 13:45:56] SELECT h.Country
FROM high_life_exp_countries h
WHERE h.Country IN ( SELECT l.Country 
					 FROM low_death_rate_countries l )
LIMIT 0, 1000
: Running...
[22, 13:45:56] SELECT h.Country
FROM high_life_exp_countries h
WHERE h.Country IN ( SELECT l.Country 
					 FROM low_death_rate_countries l )
LIMIT 0, 1000
: Fetching...
[22, 13:45:56] SELECT h.Country
FROM high_life_exp_countries h
WHERE h.Country IN ( SELECT l.Country 
					 FROM low_death_rate_countries l )
LIMIT 0, 1000
: 4 row(s) returned
[23, 13:45:59] SELECT h.Country
FROM high_life_exp_countries h
WHERE EXISTS ( SELECT 1 
				FROM low_death_rate_countries l
				WHERE h.Country = l.Country)
LIMIT 0, 1000
: Running...
[23, 13:45:59] SELECT h.Country
FROM high_life_exp_countries h
WHERE EXISTS ( SELECT 1 
				FROM low_death_rate_countries l
				WHERE h.Country = l.Country)
LIMIT 0, 1000
: Fetching...
[23, 13:45:59] SELECT h.Country
FROM high_life_exp_countries h
WHERE EXISTS ( SELECT 1 
				FROM low_death_rate_countries l
				WHERE h.Country = l.Country)
LIMIT 0, 1000
: 4 row(s) returned
[24, 13:47:57] SELECT
    c.C_Name AS Country,
    COUNT(s.YYear) AS NumberOfYears,
    AVG(s.consumption_per_smoker_per_day) AS Avg_Consumption_Per_Smoker_Per_Day,
    SUM(s.deaths) AS Total_Deaths,
    MIN(l.Life_ex_value) AS Min_Life_Expectancy,
    MAX(l.Life_ex_value) AS Max_Life_Expectancy
FROM countries c
JOIN Smoke_Examine s ON c.C_Code = s.C_code
JOIN LifeExpact l ON c.C_Code = l.C_Code AND s.YYear = l.YYear
WHERE s.YYear BETWEEN 1990 AND 2000
GROUP BY c.C_Name
HAVING AVG(s.consumption_per_smoker_per_day) > 10
ORDER BY Total_Deaths DESC
LIMIT 0, 1000
: Running...
[24, 13:47:57] SELECT
    c.C_Name AS Country,
    COUNT(s.YYear) AS NumberOfYears,
    AVG(s.consumption_per_smoker_per_day) AS Avg_Consumption_Per_Smoker_Per_Day,
    SUM(s.deaths) AS Total_Deaths,
    MIN(l.Life_ex_value) AS Min_Life_Expectancy,
    MAX(l.Life_ex_value) AS Max_Life_Expectancy
FROM countries c
JOIN Smoke_Examine s ON c.C_Code = s.C_code
JOIN LifeExpact l ON c.C_Code = l.C_Code AND s.YYear = l.YYear
WHERE s.YYear BETWEEN 1990 AND 2000
GROUP BY c.C_Name
HAVING AVG(s.consumption_per_smoker_per_day) > 10
ORDER BY Total_Deaths DESC
LIMIT 0, 1000
: Fetching...
[24, 13:47:57] SELECT
    c.C_Name AS Country,
    COUNT(s.YYear) AS NumberOfYears,
    AVG(s.consumption_per_smoker_per_day) AS Avg_Consumption_Per_Smoker_Per_Day,
    SUM(s.deaths) AS Total_Deaths,
    MIN(l.Life_ex_value) AS Min_Life_Expectancy,
    MAX(l.Life_ex_value) AS Max_Life_Expectancy
FROM countries c
JOIN Smoke_Examine s ON c.C_Code = s.C_code
JOIN LifeExpact l ON c.C_Code = l.C_Code AND s.YYear = l.YYear
WHERE s.YYear BETWEEN 1990 AND 2000
GROUP BY c.C_Name
HAVING AVG(s.consumption_per_smoker_per_day) > 10
ORDER BY Total_Deaths DESC
LIMIT 0, 1000
: 150 row(s) returned
[25, 13:53:17] SELECT a.C_Code, a.YYear, a.deathcounts, a.Household_FosilFuel, MIN(e.Life_ex_value) AS Min_Life_Expectancy, MAX(a.deathcounts) AS Max_deathair,
  CASE WHEN (SELECT b.C_Code FROM high_airpol_low_lifeex_4 b WHERE b.Max_deathair = MAX(a.deathcounts)) = a.C_Code AND 
            (SELECT c.C_Code FROM high_airpol_low_lifeex_4 c WHERE c.Min_Life_Expectancy = MIN(e.Life_ex_value)) = a.C_Code
        THEN 'Same Country'
       ELSE 'Different Countries'
  END AS Comparison
FROM airpol_occure a
INNER JOIN LifeExpact e ON a.C_Code = e.C_Code AND a.YYear = e.YYear
GROUP BY a.C_Code, a.YYear
HAVING Min_Life_Expectancy = Max_deathair
LIMIT 0, 1000
: Running...
[25, 13:53:17] SELECT a.C_Code, a.YYear, a.deathcounts, a.Household_FosilFuel, MIN(e.Life_ex_value) AS Min_Life_Expectancy, MAX(a.deathcounts) AS Max_deathair,
  CASE WHEN (SELECT b.C_Code FROM high_airpol_low_lifeex_4 b WHERE b.Max_deathair = MAX(a.deathcounts)) = a.C_Code AND 
            (SELECT c.C_Code FROM high_airpol_low_lifeex_4 c WHERE c.Min_Life_Expectancy = MIN(e.Life_ex_value)) = a.C_Code
        THEN 'Same Country'
       ELSE 'Different Countries'
  END AS Comparison
FROM airpol_occure a
INNER JOIN LifeExpact e ON a.C_Code = e.C_Code AND a.YYear = e.YYear
GROUP BY a.C_Code, a.YYear
HAVING Min_Life_Expectancy = Max_deathair
LIMIT 0, 1000
: Error Code: 1146. Table 'project.high_airpol_low_lifeex_4' doesn't exist
[26, 13:53:45] SELECT a.C_Code, a.YYear, a.deathcounts, a.Household_FosilFuel, MIN(e.Life_ex_value) AS Min_Life_Expectancy, MAX(a.deathcounts) AS Max_deathair,
  CASE WHEN (SELECT b.C_Code FROM high_airpol_low_lifeex b WHERE b.Max_deathair = MAX(a.deathcounts)) = a.C_Code AND 
            (SELECT c.C_Code FROM high_airpol_low_lifeex c WHERE c.Min_Life_Expectancy = MIN(e.Life_ex_value)) = a.C_Code
        THEN 'Same Country'
       ELSE 'Different Countries'
  END AS Comparison
FROM airpol_occure a
INNER JOIN LifeExpact e ON a.C_Code = e.C_Code AND a.YYear = e.YYear
GROUP BY a.C_Code, a.YYear
HAVING Min_Life_Expectancy = Max_deathair
LIMIT 0, 1000
: Running...
[26, 13:53:45] SELECT a.C_Code, a.YYear, a.deathcounts, a.Household_FosilFuel, MIN(e.Life_ex_value) AS Min_Life_Expectancy, MAX(a.deathcounts) AS Max_deathair,
  CASE WHEN (SELECT b.C_Code FROM high_airpol_low_lifeex b WHERE b.Max_deathair = MAX(a.deathcounts)) = a.C_Code AND 
            (SELECT c.C_Code FROM high_airpol_low_lifeex c WHERE c.Min_Life_Expectancy = MIN(e.Life_ex_value)) = a.C_Code
        THEN 'Same Country'
       ELSE 'Different Countries'
  END AS Comparison
FROM airpol_occure a
INNER JOIN LifeExpact e ON a.C_Code = e.C_Code AND a.YYear = e.YYear
GROUP BY a.C_Code, a.YYear
HAVING Min_Life_Expectancy = Max_deathair
LIMIT 0, 1000
: Error Code: 1054. Unknown column 'b.Max_deathair' in 'where clause'
[27, 13:55:47] SELECT s.C_Code, s.YYear, s.drugdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MAX(drugdeaths) AS max_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MAX(drugdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.drugdeaths = m.max_deaths
LIMIT 0, 1000
: Running...
[27, 13:55:47] SELECT s.C_Code, s.YYear, s.drugdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MAX(drugdeaths) AS max_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MAX(drugdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.drugdeaths = m.max_deaths
LIMIT 0, 1000
: Fetching...
[27, 13:55:47] SELECT s.C_Code, s.YYear, s.drugdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MAX(drugdeaths) AS max_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MAX(drugdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.drugdeaths = m.max_deaths
LIMIT 0, 1000
: 649 row(s) returned
[28, 13:58:11] SELECT s.C_Code, s.YYear, s.alcholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcholdeaths = m.min_deaths
LIMIT 0, 1000
: Running...
[28, 13:58:11] SELECT s.C_Code, s.YYear, s.alcholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcholdeaths = m.min_deaths
LIMIT 0, 1000
: Error Code: 1054. Unknown column 's.alcholdeaths' in 'field list'
[29, 13:58:35] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Running...
[29, 13:58:35] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Fetching...
[29, 13:58:36] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: 683 row(s) returned
[30, 13:59:18] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Running...
[30, 13:59:18] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Fetching...
[30, 13:59:18] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: 683 row(s) returned
[31, 14:00:28] SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
GROUP BY s.C_Code
LIMIT 0, 1000
: Running...
[31, 14:00:28] SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
GROUP BY s.C_Code
LIMIT 0, 1000
: Error Code: 1055. Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'project.s.YYear' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
[32, 14:01:11] SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM (substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths)
GROUP BY s.C_Code
LIMIT 0, 1000
: Running...
[32, 14:01:11] SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM (substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths)
GROUP BY s.C_Code
LIMIT 0, 1000
: Error Code: 1055. Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'project.s.YYear' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
[33, 14:02:14] Select * from (SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths) AS que
LIMIT 0, 1000
: Running...
[33, 14:02:14] Select * from (SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths) AS que
LIMIT 0, 1000
: Error Code: 1140. In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 'project.s.C_Code'; this is incompatible with sql_mode=only_full_group_by
[34, 14:02:26] SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Running...
[34, 14:02:26] SELECT s.C_Code, s.YYear, MIN(s.alcoholdeaths)
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Error Code: 1140. In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 'project.s.C_Code'; this is incompatible with sql_mode=only_full_group_by
[35, 14:02:34] SELECT s.C_Code, s.YYear, s.drugdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MAX(drugdeaths) AS max_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MAX(drugdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.drugdeaths = m.max_deaths
LIMIT 0, 1000
: Running...
[35, 14:02:34] SELECT s.C_Code, s.YYear, s.drugdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MAX(drugdeaths) AS max_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MAX(drugdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.drugdeaths = m.max_deaths
LIMIT 0, 1000
: Fetching...
[35, 14:02:34] SELECT s.C_Code, s.YYear, s.drugdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MAX(drugdeaths) AS max_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MAX(drugdeaths) > 0
) AS m
ON s.C_Code = m.C_Code AND s.drugdeaths = m.max_deaths
LIMIT 0, 1000
: 649 row(s) returned
[36, 14:03:51] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Running...
[36, 14:03:51] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Fetching...
[36, 14:03:51] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: 683 row(s) returned
[37, 14:04:01] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Running...
[37, 14:04:01] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: Fetching...
[37, 14:04:01] SELECT s.C_Code, s.YYear, s.alcoholdeaths
FROM substance_use s
INNER JOIN (
    SELECT C_Code, MIN(alcoholdeaths) AS min_deaths
    FROM substance_use
    GROUP BY C_Code
    HAVING MIN(alcoholdeaths) > 0
) AS m ON s.C_Code = m.C_Code AND s.alcoholdeaths = m.min_deaths
LIMIT 0, 1000
: 683 row(s) returned
[38, 14:05:56] select * from high_life_exp_countries
LIMIT 0, 1000
: Running...
[38, 14:05:56] select * from high_life_exp_countries
LIMIT 0, 1000
: Fetching...
[38, 14:05:56] select * from high_life_exp_countries
LIMIT 0, 1000
: 65 row(s) returned
[39, 14:07:55] SELECT COUNT(*) 
FROM (SELECT c.C_Code 
  FROM countries c,high_life_exp_countries hlec 
  JOIN obesity_report ob ON hlec.C_Code = ob.C_Code 
  WHERE hlec.Country = c.C_Name and c.C_Code = ob.C_Code and ob.YYear between 2000 and 2010
  GROUP BY ale.C_Code 
  HAVING AVG(ob.death_rate) > 9.66
) as t
LIMIT 0, 1000
: Running...
[39, 14:07:55] SELECT COUNT(*) 
FROM (SELECT c.C_Code 
  FROM countries c,high_life_exp_countries hlec 
  JOIN obesity_report ob ON hlec.C_Code = ob.C_Code 
  WHERE hlec.Country = c.C_Name and c.C_Code = ob.C_Code and ob.YYear between 2000 and 2010
  GROUP BY ale.C_Code 
  HAVING AVG(ob.death_rate) > 9.66
) as t
LIMIT 0, 1000
: Error Code: 1054. Unknown column 'hlec.C_Code' in 'on clause'
[40, 14:09:13] SELECT COUNT(*) 
FROM (SELECT c.C_Code 
  FROM obesity_report ob, high_life_exp_countries hlec 
  JOIN countries c ON hlec.Counrty = c.C_Name
  WHERE c.C_Code = ob.C_Code and ob.YYear between 2000 and 2010
  GROUP BY ale.C_Code 
  HAVING AVG(ob.death_rate) > 9.66
) as t
LIMIT 0, 1000
: Running...
[40, 14:09:13] SELECT COUNT(*) 
FROM (SELECT c.C_Code 
  FROM obesity_report ob, high_life_exp_countries hlec 
  JOIN countries c ON hlec.Counrty = c.C_Name
  WHERE c.C_Code = ob.C_Code and ob.YYear between 2000 and 2010
  GROUP BY ale.C_Code 
  HAVING AVG(ob.death_rate) > 9.66
) as t
LIMIT 0, 1000
: Error Code: 1054. Unknown column 'hlec.Counrty' in 'on clause'
[41, 14:09:41] SELECT COUNT(*) 
FROM (SELECT c.C_Code 
  FROM obesity_report ob, high_life_exp_countries hlec 
  JOIN countries c ON hlec.Country = c.C_Name
  WHERE c.C_Code = ob.C_Code and ob.YYear between 2000 and 2010
  GROUP BY hlec.Country 
  HAVING AVG(ob.death_rate) > 9.66
) as t
LIMIT 0, 1000
: Running...
[41, 14:09:41] SELECT COUNT(*) 
FROM (SELECT c.C_Code 
  FROM obesity_report ob, high_life_exp_countries hlec 
  JOIN countries c ON hlec.Country = c.C_Name
  WHERE c.C_Code = ob.C_Code and ob.YYear between 2000 and 2010
  GROUP BY hlec.Country 
  HAVING AVG(ob.death_rate) > 9.66
) as t
LIMIT 0, 1000
: Error Code: 1055. Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'project.c.C_Code' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
[42, 14:16:28] SELECT COUNT(*) AS num_countries
FROM high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.obesity_rate) >= 20
LIMIT 0, 1000
: Running...
[42, 14:16:28] SELECT COUNT(*) AS num_countries
FROM high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.obesity_rate) >= 20
LIMIT 0, 1000
: Error Code: 1054. Unknown column 'ob.obesity_rate' in 'having clause'
[43, 14:16:36] SELECT COUNT(*) AS num_countries
FROM high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 20
LIMIT 0, 1000
: Running...
[43, 14:16:36] SELECT COUNT(*) AS num_countries
FROM high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 20
LIMIT 0, 1000
: Fetching...
[43, 14:16:36] SELECT COUNT(*) AS num_countries
FROM high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 20
LIMIT 0, 1000
: 3 row(s) returned
[44, 14:17:57] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 20
LIMIT 0, 1000
: Running...
[44, 14:17:57] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 20
LIMIT 0, 1000
: Fetching...
[44, 14:17:57] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 20
LIMIT 0, 1000
: 3 row(s) returned
[45, 14:19:12] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 9.66
LIMIT 0, 1000
: Running...
[45, 14:19:12] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 9.66
LIMIT 0, 1000
: Fetching...
[45, 14:19:12] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 9.66
LIMIT 0, 1000
: 21 row(s) returned
[46, 14:20:07] SELECT c.C_Name, s.YYear, SUM(ao.deathcounts) as Total_Deaths
FROM countries c
JOIN airpol_occure ao ON c.C_Code = ao.C_Code
JOIN LifeExpact s ON c.C_Code = s.C_Code AND ao.YYear = s.YYear
WHERE s.YYear BETWEEN 2000 AND 2010
GROUP BY c.C_Name, s.YYear
HAVING SUM(ao.Household_FosilFuel) > 1000
ORDER BY Total_Deaths DESC
LIMIT 0, 1000
: Running...
[46, 14:20:07] SELECT c.C_Name, s.YYear, SUM(ao.deathcounts) as Total_Deaths
FROM countries c
JOIN airpol_occure ao ON c.C_Code = ao.C_Code
JOIN LifeExpact s ON c.C_Code = s.C_Code AND ao.YYear = s.YYear
WHERE s.YYear BETWEEN 2000 AND 2010
GROUP BY c.C_Name, s.YYear
HAVING SUM(ao.Household_FosilFuel) > 1000
ORDER BY Total_Deaths DESC
LIMIT 0, 1000
: Fetching...
[46, 14:20:07] SELECT c.C_Name, s.YYear, SUM(ao.deathcounts) as Total_Deaths
FROM countries c
JOIN airpol_occure ao ON c.C_Code = ao.C_Code
JOIN LifeExpact s ON c.C_Code = s.C_Code AND ao.YYear = s.YYear
WHERE s.YYear BETWEEN 2000 AND 2010
GROUP BY c.C_Name, s.YYear
HAVING SUM(ao.Household_FosilFuel) > 1000
ORDER BY Total_Deaths DESC
LIMIT 0, 1000
: 994 row(s) returned
[47, 14:20:41] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 9.66
LIMIT 0, 1000
: Running...
[47, 14:20:41] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 9.66
LIMIT 0, 1000
: Fetching...
[47, 14:20:41] SELECT COUNT(*) AS num_countries
FROM (high_life_exp_countries
JOIN countries ON high_life_exp_countries.Country = countries.C_Name
JOIN obesity_report ob ON countries.C_Code = ob.C_code)
WHERE ob.YYear BETWEEN 2000 AND 2010
GROUP BY high_life_exp_countries.Country
HAVING AVG(ob.death_rate) >= 9.66
LIMIT 0, 1000
: 21 row(s) returned
[48, 14:24:00] SELECT a.C_Code, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code
HAVING SUM(a.deathcounts) > 0
LIMIT 0, 1000
: Running...
[48, 14:24:00] SELECT a.C_Code, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code
HAVING SUM(a.deathcounts) > 0
LIMIT 0, 1000
: Fetching...
[48, 14:24:00] SELECT a.C_Code, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code
HAVING SUM(a.deathcounts) > 0
LIMIT 0, 1000
: 203 row(s) returned
[49, 14:24:40] SELECT COUNT(*) AS num_countries
FROM (
    SELECT countries.C_Code, AVG(obesity_report.death_rate) AS avg_death_rate
    FROM countries
    JOIN obesity_report ON countries.C_Code = obesity_report.C_code
    WHERE obesity_report.YYear BETWEEN 2000 AND 2010
    GROUP BY countries.C_Code
    HAVING AVG(obesity_report.death_rate) >= 9.66
) AS high_death_rate_countries
LIMIT 0, 1000
: Running...
[49, 14:24:40] SELECT COUNT(*) AS num_countries
FROM (
    SELECT countries.C_Code, AVG(obesity_report.death_rate) AS avg_death_rate
    FROM countries
    JOIN obesity_report ON countries.C_Code = obesity_report.C_code
    WHERE obesity_report.YYear BETWEEN 2000 AND 2010
    GROUP BY countries.C_Code
    HAVING AVG(obesity_report.death_rate) >= 9.66
) AS high_death_rate_countries
LIMIT 0, 1000
: Fetching...
[49, 14:24:40] SELECT COUNT(*) AS num_countries
FROM (
    SELECT countries.C_Code, AVG(obesity_report.death_rate) AS avg_death_rate
    FROM countries
    JOIN obesity_report ON countries.C_Code = obesity_report.C_code
    WHERE obesity_report.YYear BETWEEN 2000 AND 2010
    GROUP BY countries.C_Code
    HAVING AVG(obesity_report.death_rate) >= 9.66
) AS high_death_rate_countries
LIMIT 0, 1000
: 1 row(s) returned
[50, 14:26:20] SELECT COUNT(*) AS num_countries
FROM (
  SELECT c.C_Code, AVG(ob.death_rate) AS avg_death_rate
  FROM countries c
  JOIN obesity_report ob ON c.C_Code = ob.C_code
  JOIN high_life_exp_countries hlec ON c.C_Name = hlec.Country
  WHERE ob.YYear BETWEEN 2000 AND 2010
  GROUP BY c.C_Code
  HAVING avg_death_rate > 9.66
) AS t

-- 2000 ile 2010 arasinda air pollutionlari topluyor eger degerler 0 dan buyukse
SELECT a.C_Code, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code
HAVING SUM(a.deathcounts) > 0: Running...
[50, 14:26:20] SELECT COUNT(*) AS num_countries
FROM (
  SELECT c.C_Code, AVG(ob.death_rate) AS avg_death_rate
  FROM countries c
  JOIN obesity_report ob ON c.C_Code = ob.C_code
  JOIN high_life_exp_countries hlec ON c.C_Name = hlec.Country
  WHERE ob.YYear BETWEEN 2000 AND 2010
  GROUP BY c.C_Code
  HAVING avg_death_rate > 9.66
) AS t

-- 2000 ile 2010 arasinda air pollutionlari topluyor eger degerler 0 dan buyukse
SELECT a.C_Code, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code
HAVING SUM(a.deathcounts) > 0: Error Code: 1064. You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'SELECT a.C_Code, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
WH' at line 13
[51, 14:26:28] SELECT COUNT(*) AS num_countries
FROM (
  SELECT c.C_Code, AVG(ob.death_rate) AS avg_death_rate
  FROM countries c
  JOIN obesity_report ob ON c.C_Code = ob.C_code
  JOIN high_life_exp_countries hlec ON c.C_Name = hlec.Country
  WHERE ob.YYear BETWEEN 2000 AND 2010
  GROUP BY c.C_Code
  HAVING avg_death_rate > 9.66
) AS t
LIMIT 0, 1000
: Running...
[51, 14:26:28] SELECT COUNT(*) AS num_countries
FROM (
  SELECT c.C_Code, AVG(ob.death_rate) AS avg_death_rate
  FROM countries c
  JOIN obesity_report ob ON c.C_Code = ob.C_code
  JOIN high_life_exp_countries hlec ON c.C_Name = hlec.Country
  WHERE ob.YYear BETWEEN 2000 AND 2010
  GROUP BY c.C_Code
  HAVING avg_death_rate > 9.66
) AS t
LIMIT 0, 1000
: Fetching...
[51, 14:26:28] SELECT COUNT(*) AS num_countries
FROM (
  SELECT c.C_Code, AVG(ob.death_rate) AS avg_death_rate
  FROM countries c
  JOIN obesity_report ob ON c.C_Code = ob.C_code
  JOIN high_life_exp_countries hlec ON c.C_Name = hlec.Country
  WHERE ob.YYear BETWEEN 2000 AND 2010
  GROUP BY c.C_Code
  HAVING avg_death_rate > 9.66
) AS t
LIMIT 0, 1000
: 1 row(s) returned
[52, 14:27:47] SELECT c.C_Code, c.C_Name, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
JOIN countries c ON c.C_Code = a.C_Code
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code, c.C_Name
HAVING SUM(a.deathcounts) > 0
LIMIT 0, 1000
: Running...
[52, 14:27:47] SELECT c.C_Code, c.C_Name, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
JOIN countries c ON c.C_Code = a.C_Code
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code, c.C_Name
HAVING SUM(a.deathcounts) > 0
LIMIT 0, 1000
: Fetching...
[52, 14:27:47] SELECT c.C_Code, c.C_Name, SUM(a.deathcounts) AS total_deathcounts
FROM airpol_occure a
JOIN countries c ON c.C_Code = a.C_Code
WHERE a.YYear BETWEEN 2000 AND 2010
GROUP BY a.C_Code, c.C_Name
HAVING SUM(a.deathcounts) > 0
LIMIT 0, 1000
: 203 row(s) returned
[53, 14:30:22] ALTER TABLE obesity_report DROP CONSTRAINT check_year_range: Running...
[53, 14:30:22] ALTER TABLE obesity_report DROP CONSTRAINT check_year_range: 0 row(s) affected
Records: 0  Duplicates: 0  Warnings: 0
[54, 14:30:44] DROP TRIGGER fix_year_range_insert: Running...
[54, 14:30:45] DROP TRIGGER fix_year_range_insert: 0 row(s) affected
[55, 14:31:19] DROP PROCEDURE IF EXISTS get_max_obesity_rate_of_country: Running...
[55, 14:31:19] DROP PROCEDURE IF EXISTS get_max_obesity_rate_of_country: 0 row(s) affected
[56, 14:32:23] ALTER TABLE obesity_report
ADD CONSTRAINT check_year_range
CHECK (YYear BETWEEN 0 AND 2023): Running...
[56, 14:32:23] ALTER TABLE obesity_report
ADD CONSTRAINT check_year_range
CHECK (YYear BETWEEN 0 AND 2023): 5130 row(s) affected
Records: 5130  Duplicates: 0  Warnings: 0
[57, 14:32:31] INSERT INTO obesity_report (C_Code,YYear,daily_calory,prevalence_overweight,prevalence_obesity,death_rate)
VALUES ('AFG',-1,NULL,NULL,NULL,10): Running...
[57, 14:32:31] INSERT INTO obesity_report (C_Code,YYear,daily_calory,prevalence_overweight,prevalence_obesity,death_rate)
VALUES ('AFG',-1,NULL,NULL,NULL,10): Error Code: 3819. Check constraint 'check_year_range' is violated.
[58, 14:32:43] CREATE TRIGGER fix_year_range_insert BEFORE INSERT ON obesity_report
FOR EACH ROW
BEGIN
  IF NEW.YYear < 0 THEN
    SET NEW.YYear = 0;
  ELSEIF NEW.YYear > 2023 THEN
    SET NEW.YYear = 2023;
  END IF;
END: Running...
[58, 14:32:43] CREATE TRIGGER fix_year_range_insert BEFORE INSERT ON obesity_report
FOR EACH ROW
BEGIN
  IF NEW.YYear < 0 THEN
    SET NEW.YYear = 0;
  ELSEIF NEW.YYear > 2023 THEN
    SET NEW.YYear = 2023;
  END IF;
END: 0 row(s) affected
[59, 14:33:01] INSERT INTO obesity_report (C_Code,YYear,daily_calory,prevalence_overweight,prevalence_obesity,death_rate)
VALUES ('AFG',-1,NULL,NULL,NULL,10);

CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: Running...
[59, 14:33:01] INSERT INTO obesity_report (C_Code,YYear,daily_calory,prevalence_overweight,prevalence_obesity,death_rate)
VALUES ('AFG',-1,NULL,NULL,NULL,10);

CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: 1 row(s) affected
[60, 14:36:10] INSERT INTO obesity_report (C_Code,YYear,daily_calory,prevalence_overweight,prevalence_obesity,death_rate)
VALUES ('AFG',-1,NULL,NULL,NULL,10);

CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: Running...
[60, 14:36:10] INSERT INTO obesity_report (C_Code,YYear,daily_calory,prevalence_overweight,prevalence_obesity,death_rate)
VALUES ('AFG',-1,NULL,NULL,NULL,10);

CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: Error Code: 1062. Duplicate entry '0-AFG' for key 'obesity_report.PRIMARY'
[61, 14:37:05] CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: Running...
[61, 14:37:05] CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: Error Code: 1304. PROCEDURE get_max_obesity_rate_of_country already exists
[62, 14:37:40] DROP PROCEDURE IF EXISTS get_max_obesity_rate_of_country: Running...
[62, 14:37:40] DROP PROCEDURE IF EXISTS get_max_obesity_rate_of_country: 0 row(s) affected
[63, 14:37:44] CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: Running...
[63, 14:37:44] CREATE PROCEDURE get_max_obesity_rate_of_country(IN iso_code VARCHAR(32))
BEGIN
    DECLARE death_rate_max FLOAT;
    DECLARE death_rate_year INT;
    DECLARE iso_code_count INT;
    
    SELECT COUNT(*) INTO iso_code_count FROM obesity_report WHERE C_Code = iso_code;
    -- eger o iso codde country bulamadiysan error ver
    IF iso_code_count = 0 THEN
        SELECT "Invalid parameter value" AS message;
    ELSE
		-- max death rateli columnu al yearini ve death_rate ini variablelera ata
		SELECT death_rate,YYear INTO death_rate_max, death_rate_year
			FROM obesity_report where C_code = iso_code 
			and death_rate =(SELECT MAX(death_rate) from obesity_report where C_code = iso_code);
		SELECT CONCAT('Maximum death rate of ',iso_code,': ', death_rate_max, ', Year: ', death_rate_year) AS message;
    END IF;
END: 0 row(s) affected
[64, 14:38:03] CALL get_max_obesity_rate_of_country('AFG'): Running...
[64, 14:38:03] CALL get_max_obesity_rate_of_country('AFG'): Fetching...
[64, 14:38:03] CALL get_max_obesity_rate_of_country('AFG'): 1 row(s) returned
[65, 14:38:12] CALL get_max_obesity_rate_of_country('TUR'): Running...
[65, 14:38:12] CALL get_max_obesity_rate_of_country('TUR'): Fetching...
[65, 14:38:12] CALL get_max_obesity_rate_of_country('TUR'): 1 row(s) returned
[66, 14:38:18] CALL get_max_obesity_rate_of_country('kk'): Running...
[66, 14:38:18] CALL get_max_obesity_rate_of_country('kk'): Fetching...
[66, 14:38:18] CALL get_max_obesity_rate_of_country('kk'): 1 row(s) returned
[67, 14:39:18] select * from obesity_report ob where ob.C_Code = 'TUR'
LIMIT 0, 1000
: Running...
[67, 14:39:18] select * from obesity_report ob where ob.C_Code = 'TUR'
LIMIT 0, 1000
: Fetching...
[67, 14:39:18] select * from obesity_report ob where ob.C_Code = 'TUR'
LIMIT 0, 1000
: 27 row(s) returned
[68, 17:18:19] SHOW VARIABLES LIKE 'log_error': Running...
[68, 17:18:19] SHOW VARIABLES LIKE 'log_error': Fetching...
[68, 17:18:19] SHOW VARIABLES LIKE 'log_error': 1 row(s) returned
